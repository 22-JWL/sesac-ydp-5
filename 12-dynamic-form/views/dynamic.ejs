<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>

    <!-- jquery cdn -->
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
      div.result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1 style="background-color: bisque"><%= title %></h1>

    <h1>동적 폼 전송 연습하기!</h1>

    <!-- 이름, 성별(라디오버튼)을 정보를 입력받는 폼 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" id="name" name="name" value="SESAC" />
      <br />

      성별
      <input type="radio" name="gender" value="m" id="male" checked />
      <label for="male">남</label>
      <input type="radio" name="gender" value="f" id="female" />
      <label for="female">여</label>
      <br />
      <br />

      <button type="button" onClick="ajaxGet();">Ajax Get 제출</button>
      <button type="button" onClick="ajaxPost();">Ajax Post 제출</button>
      <br />

      <button type="button" onClick="axiosGet();">Axios Get 제출</button>
      <button type="button" onClick="axiosPost();">Axios Post 제출</button>
      <br />

      <button type="button" onClick="fetchGet();">fetch Get 제출</button>
      <button type="button" onClick="fetchPost();">fetch Post 제출</button>
    </form>

    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>

    <script>
      // frontend javascript
      const resultBox = document.querySelector('div.result');

      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];
        console.log(form);

        // 폼 객체 요소 확인
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value); // 이름 input에 입력한 값
        console.dir(form.gender.value); // 성별 radio input을 선택한 값

        // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: 'get', // 요청의 종류 (= form의 method 속성)
          url: '/ajax', // 요청의 경로 (= form의 action 속성)
          data: data, // 요청에 실어보낼 데이터 (서버가 받게 될 데이터)
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            resultBox.textContent = `GET /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; // 서버로 보낼 데이터를 만듦

        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          },
        });
      }

      async function axiosGet() {
        console.log('get 함수 호출');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        axios({
          method: 'get', //요청방식(= form method 속성)
          url: '/axios', //요청경로= form action 속성)
          params: data, //서버로 보낼 데이터(query string)
        })
          .then(function (response) {
            console.log(response); //서버의 응답결과
            console.log(response.data); //서버의 응답데이터 확인

            ///
            const { name, gender } = data;
            resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시죠?`;
          })

          // const{name, gender}
          //  resultBox.textContent = `GET /axios 요청 완료!! ${response.data.name}님은 ${response.data.gender}이시죠?`;

          .catch(function (error) {
            console.log('Error', error);
          });
      }
      async function axiosPost() {
        console.log('axiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        try {
          const response = await axios({
            method: 'post',
            url: '/axios',
            data: data,
          });
          const { name, gender } = response.data;
          resultBox.textContent = `async/POST/axios 요청완료 ${name}님은 ${gender}이시죠? `;
        } catch (error) {
          console.log('err임다', error);
        }
      }

      //fetch(url, options)
      function fetchGet() {
        console.log('fetchGet 함수 호출!');

        const form = document.forms['register'];
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then(function (response) {
            console.log(response);
            return response.json();
            //json 형태로 응답데이터를 전달받음. 응답(response) 객체는 json() 메서드를 제공
            //응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체 (js obj)로 변환
          }) //{method: get}은 default로 get 방식으로 작동 options를 생략 가능~
          .then(function (data) {
            console.log(data);
            resultBox.textContent = `GET /fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?`;
          });
      }

      function fetchPost() {
        console.log('fetchPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; // 서버에 넘겨줄 데이터

        // fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
        // 1. method 키 post 지정
        // 2. headers 키 JSON 포맷 사용 선언
        // 3. body 키 서버로 보낼 데이터
        fetch('/fetch', {
          method: 'POST',
          header: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          // data: js obj
          // JSON.stringify(data): js obj -> json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then((response) => {
            console.log(data);
            resultBox.textContent = `POST /fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          });
      }

      //대부분 async await가 보기 편리하다.




      

    </script>
<hr/>

<h1>open api를 이용해 고향이 사진 랜덤 돌리기<h1>

  <button onclick="changeImg()"></button>
  <img width="500" hight ="5000" src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png" alt="">
  
  
  <script>

    async function changeImg(){
      const res = await axios({
        method: 'get',
        url : 'https://api.thecatapi.com/v1/images/search'
      });
      const{data} = res;
      img.src = data[0].url;
    }


    const resultBox = document.querySelector('div.re');
    
  </script>


  </body>
</html>
